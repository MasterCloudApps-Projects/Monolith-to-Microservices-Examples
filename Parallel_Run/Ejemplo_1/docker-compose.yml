version: '3.0'
services: 

  postgres-mono:
    image: postgres
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    restart: always
    networks:
      - app-network
  
  postgres-micro:
    image: postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    restart: always
    networks:
      - app-network
    depends_on:
      - postgres-mono

  1-parallel-run-monolith:
    image: 1_parallel_run_monolith
    container_name: '1_parallel_run_monolith'
    restart: on-failure
    build: 
      context: ./1_parallel_run_monolith
      dockerfile: ./Dockerfile
    ports: 
      - 8080:8080
    networks:
      - app-network
    environment:
      - DATABASE_HOST=postgres-mono
      - USER_NOTIFICATION_MS_HOST=1-parallel-run-notification-ms
      - USER_NOTIFICATION_MS_PORT=8081
    depends_on: 
      - 1-parallel-run-notification-ms

  1-parallel-run-notification-ms:
    image: 1_parallel_run_notification_ms
    container_name: '1_parallel_run_notification_ms'
    restart: on-failure
    build: 
      context: ./1_parallel_run_notification_ms
      dockerfile: ./Dockerfile
    ports: 
      - 8081:8081
    environment:
      - DATABASE_HOST=postgres-micro
    depends_on:
      - postgres-micro
    networks:
      - app-network
    
  1-parallel-run-batch-service:
    image: 1_parallel_run_batch_service
    container_name: '1_parallel_run_batch_service'
    restart: on-failure
    build: 
      context: ./1_parallel_run_batch_service
      dockerfile: ./Dockerfile
    ports: 
      - 8082:8082
    environment:
      - DATABASE_MICRO_HOST=postgres-micro
      - DATABASE_MONO_HOST=postgres-mono
    depends_on:
      - 1-parallel-run-monolith
    networks:
      - app-network
    
networks:
  app-network:
    driver: bridge